/*
 * Traffic Simulator
 *
 * Copyright (C) 2018, Ajuntament de Sant Feliu de Llobregat
 *
 * This program is licensed and may be used, modified and redistributed under
 * the terms of the European Public License (EUPL), either version 1.1 or (at
 * your option) any later version as soon as they are approved by the European
 * Commission.
 *
 * Alternatively, you may redistribute and/or modify this program under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either  version 3 of the License, or (at your option)
 * any later version.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the licenses for the specific language governing permissions, limitations
 * and more details.
 *
 * You should have received a copy of the EUPL1.1 and the LGPLv3 licenses along
 * with this program; if not, you may find them at:
 *
 *   https://joinup.ec.europa.eu/software/page/eupl/licence-eupl
 *   http://www.gnu.org/licenses/
 *   and
 *   https://www.gnu.org/licenses/lgpl.txt
 */
package org.santfeliu.trafsim;

import org.santfeliu.trafsim.io.GMLReader;
import org.santfeliu.trafsim.geom.Geometry;
import org.santfeliu.trafsim.geom.LineString;
import org.santfeliu.trafsim.geom.Point;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.io.File;
import java.util.ArrayList;
import java.util.Map;
import javax.swing.JFileChooser;
import org.santfeliu.trafsim.io.GMLReader.Processor;

/**
 *
 * @author realor
 */
public class ImportDialog extends javax.swing.JDialog
{
  private ArrayList<Feature> features;
  private GenericLayer layer;
  private int locationSequence = 0;
  private static String wfsUrl;
  private static String wfsUsername;
  private static String wfsPassword;

  /**
   * Creates new form ImportDialog
   */
  public ImportDialog(java.awt.Frame parent, boolean modal)
  {
    super(parent, modal);
    initComponents();
    wfsTextField.setText(wfsUrl);
    wfsUserTextField.setText(wfsUsername);
    wfsPasswordField.setText(wfsPassword);
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {
    java.awt.GridBagConstraints gridBagConstraints;

    centerPanel = new javax.swing.JPanel();
    fromLabel = new javax.swing.JLabel();
    fromComboBox = new javax.swing.JComboBox<>();
    fromPanel = new javax.swing.JPanel();
    wfsPanel = new javax.swing.JPanel();
    wfsLabel = new javax.swing.JLabel();
    wfsTextField = new javax.swing.JTextField();
    layerLabel = new javax.swing.JLabel();
    layerTextField = new javax.swing.JTextField();
    wfsUserTextField = new javax.swing.JTextField();
    wfsPasswordField = new javax.swing.JPasswordField();
    usernameLabel = new javax.swing.JLabel();
    passwordLabel = new javax.swing.JLabel();
    diskPanel = new javax.swing.JPanel();
    pathLabel = new javax.swing.JLabel();
    pathTextField = new javax.swing.JTextField();
    exploreButton = new javax.swing.JButton();
    toLabel = new javax.swing.JLabel();
    toComboBox = new javax.swing.JComboBox<>();
    toPanel = new javax.swing.JPanel();
    graphPanel = new javax.swing.JPanel();
    speedLabel = new javax.swing.JLabel();
    speedTextField = new javax.swing.JTextField();
    fill1Label = new javax.swing.JLabel();
    lanesLabel = new javax.swing.JLabel();
    lanesTextField = new javax.swing.JTextField();
    layerPanel = new javax.swing.JPanel();
    layerLabelLabel = new javax.swing.JLabel();
    layerLabelTextField = new javax.swing.JTextField();
    vehiclesPanel = new javax.swing.JPanel();
    groupLabel = new javax.swing.JLabel();
    groupTextField = new javax.swing.JTextField();
    countLabel = new javax.swing.JLabel();
    countTextField = new javax.swing.JTextField();
    fill3Label = new javax.swing.JLabel();
    locationsPanel = new javax.swing.JPanel();
    locationNameTextField = new javax.swing.JTextField();
    locationNameLabel = new javax.swing.JLabel();
    locationLabelLabel = new javax.swing.JLabel();
    locationLabelTextField = new javax.swing.JTextField();
    fill4Label = new javax.swing.JLabel();
    southPanel = new javax.swing.JPanel();
    importButton = new javax.swing.JButton();
    cancelButton = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/santfeliu/trafsim/resources/TrafficSimulator"); // NOI18N
    setTitle(bundle.getString("dialog.import.title")); // NOI18N
    setMinimumSize(new java.awt.Dimension(600, 400));

    centerPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4));
    centerPanel.setLayout(new java.awt.GridBagLayout());

    fromLabel.setText(bundle.getString("dialog.import.from")); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    centerPanel.add(fromLabel, gridBagConstraints);

    fromComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "WFS", "Disk" }));
    fromComboBox.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        fromComboBoxActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    centerPanel.add(fromComboBox, gridBagConstraints);

    fromPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    fromPanel.setLayout(new java.awt.CardLayout());

    wfsPanel.setLayout(new java.awt.GridBagLayout());

    wfsLabel.setText(bundle.getString("dialog.import.wfsUrl")); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    wfsPanel.add(wfsLabel, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.gridheight = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    wfsPanel.add(wfsTextField, gridBagConstraints);

    layerLabel.setText(bundle.getString("dialog.inport.layerName")); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    wfsPanel.add(layerLabel, gridBagConstraints);

    layerTextField.setPreferredSize(new java.awt.Dimension(180, 26));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.gridheight = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    wfsPanel.add(layerTextField, gridBagConstraints);

    wfsUserTextField.setPreferredSize(new java.awt.Dimension(180, 26));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.gridheight = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    wfsPanel.add(wfsUserTextField, gridBagConstraints);

    wfsPasswordField.setPreferredSize(new java.awt.Dimension(180, 26));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 6;
    gridBagConstraints.gridheight = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    wfsPanel.add(wfsPasswordField, gridBagConstraints);

    usernameLabel.setText(bundle.getString("dialog.import.username")); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    wfsPanel.add(usernameLabel, gridBagConstraints);

    passwordLabel.setText(bundle.getString("dialog.import.password")); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 6;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    wfsPanel.add(passwordLabel, gridBagConstraints);

    fromPanel.add(wfsPanel, "WFS");

    diskPanel.setLayout(new java.awt.GridBagLayout());

    pathLabel.setText(bundle.getString("dialog.import.path")); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    diskPanel.add(pathLabel, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridheight = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    diskPanel.add(pathTextField, gridBagConstraints);

    exploreButton.setText(bundle.getString("dialog.import.explore")); // NOI18N
    exploreButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        exploreButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridheight = 3;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    diskPanel.add(exploreButton, gridBagConstraints);

    fromPanel.add(diskPanel, "Disk");

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weighty = 0.5;
    centerPanel.add(fromPanel, gridBagConstraints);

    toLabel.setText(bundle.getString("dialog.import.toLayer")); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    centerPanel.add(toLabel, gridBagConstraints);

    toComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Graph", "Locations", "Vehicles", "Layer" }));
    toComboBox.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        toComboBoxActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    centerPanel.add(toComboBox, gridBagConstraints);

    toPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    toPanel.setLayout(new java.awt.CardLayout());

    graphPanel.setLayout(new java.awt.GridBagLayout());

    speedLabel.setText(bundle.getString("dialog.import.speedField")); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    graphPanel.add(speedLabel, gridBagConstraints);

    speedTextField.setText("SPEED");
    speedTextField.setPreferredSize(new java.awt.Dimension(140, 26));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    graphPanel.add(speedTextField, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    graphPanel.add(fill1Label, gridBagConstraints);

    lanesLabel.setText(bundle.getString("dialog.import.lanesField")); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    graphPanel.add(lanesLabel, gridBagConstraints);
    lanesLabel.getAccessibleContext().setAccessibleName("lanes");

    lanesTextField.setText("LANES");
    lanesTextField.setPreferredSize(new java.awt.Dimension(140, 26));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    graphPanel.add(lanesTextField, gridBagConstraints);

    toPanel.add(graphPanel, "Graph");

    layerPanel.setLayout(new java.awt.GridBagLayout());

    layerLabelLabel.setText(bundle.getString("dialog.import.layerLabel")); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    layerPanel.add(layerLabelLabel, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridheight = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    layerPanel.add(layerLabelTextField, gridBagConstraints);

    toPanel.add(layerPanel, "Layer");

    vehiclesPanel.setLayout(new java.awt.GridBagLayout());

    groupLabel.setText(bundle.getString("dialog.import.groupField")); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.ipadx = 6;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    vehiclesPanel.add(groupLabel, gridBagConstraints);

    groupTextField.setText("GROUP");
    groupTextField.setPreferredSize(new java.awt.Dimension(140, 26));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridheight = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    vehiclesPanel.add(groupTextField, gridBagConstraints);

    countLabel.setText(bundle.getString("dialog.import.countField")); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.ipadx = 6;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    vehiclesPanel.add(countLabel, gridBagConstraints);

    countTextField.setText("COUNT");
    countTextField.setPreferredSize(new java.awt.Dimension(140, 26));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.gridheight = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    vehiclesPanel.add(countTextField, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
    gridBagConstraints.weightx = 1.0;
    vehiclesPanel.add(fill3Label, gridBagConstraints);

    toPanel.add(vehiclesPanel, "Vehicles");

    locationsPanel.setLayout(new java.awt.GridBagLayout());

    locationNameTextField.setText("NAME");
    locationNameTextField.setToolTipText("");
    locationNameTextField.setPreferredSize(new java.awt.Dimension(140, 26));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    locationsPanel.add(locationNameTextField, gridBagConstraints);

    locationNameLabel.setText(bundle.getString("dialog.import.nameField")); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    locationsPanel.add(locationNameLabel, gridBagConstraints);

    locationLabelLabel.setText(bundle.getString("dialog.import.labelField")); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    locationsPanel.add(locationLabelLabel, gridBagConstraints);

    locationLabelTextField.setText("LABEL");
    locationLabelTextField.setPreferredSize(new java.awt.Dimension(140, 26));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE_LEADING;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    locationsPanel.add(locationLabelTextField, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 0.5;
    locationsPanel.add(fill4Label, gridBagConstraints);

    toPanel.add(locationsPanel, "Locations");

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weighty = 0.5;
    centerPanel.add(toPanel, gridBagConstraints);

    getContentPane().add(centerPanel, java.awt.BorderLayout.CENTER);

    importButton.setText(bundle.getString("dialog.import.import")); // NOI18N
    importButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        importButtonActionPerformed(evt);
      }
    });
    southPanel.add(importButton);

    cancelButton.setText(bundle.getString("dialog.cancel")); // NOI18N
    cancelButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        cancelButtonActionPerformed(evt);
      }
    });
    southPanel.add(cancelButton);

    getContentPane().add(southPanel, java.awt.BorderLayout.PAGE_END);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelButtonActionPerformed
  {//GEN-HEADEREND:event_cancelButtonActionPerformed
    dispose();
  }//GEN-LAST:event_cancelButtonActionPerformed

  private void fromComboBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_fromComboBoxActionPerformed
  {//GEN-HEADEREND:event_fromComboBoxActionPerformed
    String name = (String)fromComboBox.getSelectedItem();
    ((CardLayout)fromPanel.getLayout()).show(fromPanel, name);
  }//GEN-LAST:event_fromComboBoxActionPerformed

  private void toComboBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_toComboBoxActionPerformed
  {//GEN-HEADEREND:event_toComboBoxActionPerformed
    String name = (String)toComboBox.getSelectedItem();
    ((CardLayout)toPanel.getLayout()).show(toPanel, name);
  }//GEN-LAST:event_toComboBoxActionPerformed

  private void exploreButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_exploreButtonActionPerformed
  {//GEN-HEADEREND:event_exploreButtonActionPerformed
    JFileChooser chooser = new JFileChooser();
    int result = chooser.showDialog(this, "Select");
    if (result == JFileChooser.APPROVE_OPTION)
    {
      pathTextField.setText(chooser.getSelectedFile().getAbsolutePath());
    }
  }//GEN-LAST:event_exploreButtonActionPerformed

  private void importButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_importButtonActionPerformed
  {//GEN-HEADEREND:event_importButtonActionPerformed
    TrafficSimulator simulator = (TrafficSimulator)getParent();
    final Simulation simulation = simulator.getSimulation();
    try
    {
      Processor processor = null;
      features = new ArrayList<Feature>();
      layer = null;

      String as = (String)toComboBox.getSelectedItem();
      if ("Graph".equals(as))
      {
        processor = (Geometry geometry, Map attributes) ->
        {
          if (geometry instanceof LineString)
          {
            int speed = 50;
            int lanes = 1;
            Object value = attributes.get(speedTextField.getText());
            if (value instanceof String)
            {
              try
              {
                speed = Integer.parseInt(value.toString());
              }
              catch (NumberFormatException ex)
              {
              }
            }
            value = attributes.get(lanesTextField.getText());
            if (value instanceof String)
            {
              try
              {
                lanes = Integer.parseInt(value.toString());
              }
              catch (NumberFormatException ex)
              {
              }
            }
            features.add(simulation.getRoadGraph().newEdge(
              (LineString)geometry, speed, lanes));
          }
        };
      }
      else if ("Locations".equals(as))
      {
        processor = (Geometry geometry, Map attributes) ->
        {
          String locationName = "loc_" + locationSequence;
          String locationLabel = "Location " + locationSequence;
          locationSequence++;
          if (geometry instanceof Point)
          {
            Object value = attributes.get(this.locationNameTextField.getText());
            if (value instanceof String)
            {
              locationName = value.toString();
            }
            value = attributes.get(this.locationLabelTextField.getText());
            if (value instanceof String)
            {
              locationLabel = value.toString();
            }
            features.add(simulation.getLocations().newLocation(
              locationName, locationLabel, (Point)geometry, false));
          }
        };
      }
      else if ("Vehicles".equals(as))
      {
        processor = (Geometry geometry, Map attributes) ->
        {
          if (geometry instanceof Point)
          {
            int numVehicles = 1;
            String groupName = "default";
            Object value = attributes.get(countTextField.getText());
            if (value instanceof String)
            {
              try
              {
                numVehicles = Integer.parseInt(value.toString());
              }
              catch (Exception ex)
              {
              }
            }
            value = attributes.get(groupTextField.getText());
            if (value instanceof String)
            {
              groupName = value.toString();
            }
            features.add(simulation.getVehicles().newVehicleGroup(
              (Point)geometry, numVehicles, groupName, null));
          }
        };
      }
      else if ("Layer".equals(as))
      {
        layer = new GenericLayer(layerLabelTextField.getText(),
          Color.LIGHT_GRAY);
        processor = (Geometry geometry, Map attributes) ->
        {
          if (geometry != null)
          {
            features.add(layer.newFeature(geometry));
          }
        };
      }

      setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
      String from = (String)fromComboBox.getSelectedItem();
      if ("WFS".equals(from))
      {
        wfsUrl = wfsTextField.getText();
        wfsUsername = wfsUserTextField.getText();
        wfsPassword = new String(wfsPasswordField.getPassword());
        GMLReader reader = new GMLReader();
        reader.setSrsName(simulation.getSrsName());
        reader.readLayer(wfsUrl, layerTextField.getText(),
          wfsUsername, wfsPassword, processor);
      }
      else if ("Disk".equals(from))
      {
        GMLReader reader = new GMLReader();
        reader.readLayer(new File(pathTextField.getText()), processor);
      }

      TrafficSimulator trafficSimulator = (TrafficSimulator)getParent();
      if (features.size() > 0)
      {
        if (layer != null)
        {
          simulation.addGenericLayer(layer);
        }
        for (Feature feature : features)
        {
          feature.add();
        }
        trafficSimulator.setModified(true);
      }
      simulator.getMapViewer().repaint();
      setCursor(Cursor.getDefaultCursor());
      dispose();
    }
    catch (Exception ex)
    {
      setCursor(Cursor.getDefaultCursor());
      simulator.showError(this, "Import", ex);
    }
  }//GEN-LAST:event_importButtonActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton cancelButton;
  private javax.swing.JPanel centerPanel;
  private javax.swing.JLabel countLabel;
  private javax.swing.JTextField countTextField;
  private javax.swing.JPanel diskPanel;
  private javax.swing.JButton exploreButton;
  private javax.swing.JLabel fill1Label;
  private javax.swing.JLabel fill3Label;
  private javax.swing.JLabel fill4Label;
  private javax.swing.JComboBox<String> fromComboBox;
  private javax.swing.JLabel fromLabel;
  private javax.swing.JPanel fromPanel;
  private javax.swing.JPanel graphPanel;
  private javax.swing.JLabel groupLabel;
  private javax.swing.JTextField groupTextField;
  private javax.swing.JButton importButton;
  private javax.swing.JLabel lanesLabel;
  private javax.swing.JTextField lanesTextField;
  private javax.swing.JLabel layerLabel;
  private javax.swing.JLabel layerLabelLabel;
  private javax.swing.JTextField layerLabelTextField;
  private javax.swing.JPanel layerPanel;
  private javax.swing.JTextField layerTextField;
  private javax.swing.JLabel locationLabelLabel;
  private javax.swing.JTextField locationLabelTextField;
  private javax.swing.JLabel locationNameLabel;
  private javax.swing.JTextField locationNameTextField;
  private javax.swing.JPanel locationsPanel;
  private javax.swing.JLabel passwordLabel;
  private javax.swing.JLabel pathLabel;
  private javax.swing.JTextField pathTextField;
  private javax.swing.JPanel southPanel;
  private javax.swing.JLabel speedLabel;
  private javax.swing.JTextField speedTextField;
  private javax.swing.JComboBox<String> toComboBox;
  private javax.swing.JLabel toLabel;
  private javax.swing.JPanel toPanel;
  private javax.swing.JLabel usernameLabel;
  private javax.swing.JPanel vehiclesPanel;
  private javax.swing.JLabel wfsLabel;
  private javax.swing.JPanel wfsPanel;
  private javax.swing.JPasswordField wfsPasswordField;
  private javax.swing.JTextField wfsTextField;
  private javax.swing.JTextField wfsUserTextField;
  // End of variables declaration//GEN-END:variables
}
